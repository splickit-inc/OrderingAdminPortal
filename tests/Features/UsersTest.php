<?php

namespace Tests\Features;

use App\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Log;
use Tests\TestCase;
use Tests\Unit\Users\Roles\BrandManager;
use Tests\Unit\Users\Roles\IRoleType;
use Tests\Unit\Users\Roles\MultiOperator;
use Tests\Unit\Users\Roles\OwnerOperator;
use Tests\Unit\Users\Roles\PartnerAdmin;
use Tests\Unit\Users\Roles\Reseller;
use Tests\Unit\Users\Roles\StoreAssociate;
use Tests\Unit\Users\Roles\StoreManager;
use Tests\Unit\Users\Roles\SuperUser;
use Tests\Unit\Visibility\All;
use Tests\Unit\Visibility\Brand;
use Tests\Unit\Visibility\MineOnly;
use Tests\Unit\Visibility\Operator;
use Tests\Unit\Visibility\UGlobal;

class UsersTest extends TestCase
{
    use DatabaseTransactions;

    protected $baseUrl;

    protected $roles = [
        'brand_manager',
        'super_user',
        'partner_admin',
        'reseller',
        'owner_operator',
        'store_manager',
        'multi_operator',
        'store_associate',
    ];

    protected $visibilities = [
        'global',
        'brand',
        'all',
        'mine_only',
        'operator',
    ];

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->baseUrl = env('APP_URL');
        $this->app->bind('super_user', SuperUser::class);
        $this->app->bind('partner_admin', PartnerAdmin::class);
        $this->app->bind('reseller', Reseller::class);
        $this->app->bind('owner_operator', OwnerOperator::class);
        $this->app->bind('store_manager', StoreManager::class);
        $this->app->bind('multi_operator', MultiOperator::class);
        $this->app->bind('brand_manager', BrandManager::class);
        $this->app->bind('store_associate', StoreAssociate::class);
        $this->app->bind('global', UGlobal::class);
        $this->app->bind('brand', Brand::class);
        $this->app->bind('all', All::class);
        $this->app->bind('operator', Operator::class);
        $this->app->bind('mine_only', MineOnly::class);
    }

    /** @test */
    public function testAllKindOfUserResponses()
    {
        \DB::beginTransaction();
        foreach ($this->visibilities as $visibility) {
            Log::debug("Working on visibility: " . $visibility);
            foreach ($this->roles as $current_role) {
                Log::debug("Working on role: " . $current_role);
                /** @var IRoleType $roleTester */
                $roleTester = $this->app->make($current_role, ['visibility' => $this->app->make($visibility)]);

                /** Test with a user with correct configuration check each visibility */
                $roleTester->setVisibilityConfiguration(true);
                $user = $roleTester->getUser();
                $response = $this->makeLoginSteps($user, $roleTester);
                $responseData = $response->decodeResponseJson();
                $token = $responseData['token'];
                $response = $response->get('user/session_info', ['authorization' => 'Bearer ' . $token]);
                $response->seeJsonStructure($roleTester->getSessionInfoResponseStructure());
                $response->seeJson($roleTester->getSessionInfoResponseData($user));
                $responseData = $response->decodeResponseJson();
                $result = $roleTester->checkPermissionsFromResponse($responseData);
                $this->assertTrue($result, "The permissions returned for the role ${current_role} are not the expected");
            }
        }
    }

    /** @test  */
    public function testAllkindOfUserErrorResponses(){
        \DB::beginTransaction();
        foreach ($this->visibilities as $visibility) {
            //\Log::debug("Working on visibility: " . $visibility);
            foreach ($this->roles as $current_role) {
                //\Log::debug("Working on role: " . $current_role);
                /** @var IRoleType $roleTester */
                $roleTester = $this->app->make($current_role, ['visibility' => $this->app->make($visibility)]);

                /** Test if the user has errors or missing configuration values */
                $roleTester->setVisibilityConfiguration(false);
                $user = $roleTester->getUser();
                $this->makeLoginSteps($user, $roleTester);
            }
            break;
        }
        \DB::rollBack();
    }

    /**
     * @param User $user
     * @param IRoleType $roleTester
     * @return UsersTest
     */
    protected function makeLoginSteps(User $user, $roleTester)
    {
        $response = $this->post('login_attempt', ['email' => $user->email, 'password' => 'Test96321']);
        $response->seeJsonStructure($roleTester->getLoginAttemptResponseStructure());
        $response->seeJson($roleTester->getLoginAttemptResponseData($user));
        return $response;
    }
}